group 'com.mickey305'
version '0.0.1'

apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'application'

sourceCompatibility = JavaVersion.VERSION_1_10
targetCompatibility = JavaVersion.VERSION_1_10

mainClassName = 'com.mickey305.foundation.tools.maintenance.v3.MaintenanceBatch'

def defaultEncoding = 'UTF-8'

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:none"
        options.encoding = defaultEncoding
    }

    tasks.withType(Test) {
        systemProperty "file.encoding", defaultEncoding
    }
}

run {
    // gradlew run maintenance:run -Pargs="{PROJECT_ROOT}\foundation\src\main\java"
    if (project.hasProperty('args')) {
        args project.args.split('\\s+')
    }
}

repositories {
    mavenCentral()
    jcenter()
}

sourceSets {
    // original module namespace
    vendor {
        java {
            srcDir "src/vendor/java"
        }
        resources {
            srcDir "src/vendor/resources"
        }
    }
    main {
        compileClasspath += vendor.output
        runtimeClasspath += vendor.output
    }
    test {
        compileClasspath += vendor.output
        runtimeClasspath += vendor.output
    }
}

configurations {
    vendorCompile.extendsFrom implementation
}

dependencies {
    //vendorApi project(':foundation')
    implementation project(':foundation')

    // - Maven repository hosting
    //  URL: https://mvnrepository.com/
    testImplementation group: 'junit'                   , name: 'junit'              , version: '4.12'
    implementation     group: 'org.apache.commons'      , name: 'commons-lang3'      , version: '3.8.1'
    implementation     group: 'org.reflections'         , name: 'reflections'        , version: '0.9.11'

    // -- OSS repository
    //  URL: https://github.com/square/javapoet
    implementation     group: 'com.squareup'            , name: 'javapoet'           , version: '1.11.1'
}

// 依存ライブラリのJarファイルをコピーする
task collectDependenciesJar {
    doFirst {
        project.copy {
            from project.configurations.runtimeClasspath
            into "${project.buildDir}/dependencies/compile" as Object
        }
    }
    doLast {
        println 'collectDependenciesJar completed!'
    }
}

// jdeps:人間がそれなりに見やすい出力を吐いてくれる
task deps(type: Exec, dependsOn: [jar, collectDependenciesJar]){
    environment "_JAVA_OPTIONS", "-Duser.language=en -Duser.country=US"
    commandLine "jdeps", "-dotoutput", "${project.buildDir}/reports/deps", "-cp", "${project.buildDir}/dependencies/compile/*", "-R" ,"${project.buildDir}/libs/${project.name}-${project.version}.jar"
    doLast {
        println 'deps completed!'
    }
}

// jdeps:graphviz形式のサマリーを指定のフォルダに吐いてくれる
task depsSummary(type: Exec, dependsOn: [jar, collectDependenciesJar]){
    environment "_JAVA_OPTIONS", "-Duser.language=en -Duser.country=US"
    commandLine "jdeps", "-dotoutput", "${project.buildDir}/reports/deps", "-s", "-cp", "${project.buildDir}/dependencies/compile/*", "-R" ,"${project.buildDir}/libs/${project.name}-${project.version}.jar"
    doLast {
        println 'depsSummary completed!'
    }
}

// Graphvizコマンドで依存パッケージのイメージを作成する
task genDepsImg(dependsOn: [deps, depsSummary]){
    doFirst {
        def dir = file("${project.buildDir}/reports/deps")
        def files = dir.listFiles()
        for (int i = 0; i < files.length; i++) {
            def file = files[i]
            def filename = file.getName()
            if (filename.endsWith(".dot")) {
                if (filename.contains("summary")) {
                    exec {
                        workingDir = dir.getCanonicalPath()
                        commandLine "dot", "-Kdot", "-Tpng", "${filename}", "-o#img_${filename}.png"
                    }
                } else {
                    exec {
                        workingDir = dir.getCanonicalPath()
                        commandLine "dot", "-Ksfdp", "-Tpng", "${filename}", "-o#img_${filename}.png"
                    }
                }
            }
        }
    }
    doLast {
        println 'genDepsImg completed!'
    }
}
